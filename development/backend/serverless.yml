
service: csbport # NOTE: update this with your service name

plugins:
  - serverless-dotenv-plugin

custom: 
  baseTableName: 'portrequest-table-${self:provider.stage}'
  webSocketApiName: 'csbport-ws-${self:provider.stage}'
  requestsTableName: '${self:custom.baseTableName}-requests'
  clientsTableName: '${self:custom.baseTableName}-clients'
  privateKey: ${env:PRIVATE_KEY}
  publicKey: ${env:PUBLIC_KEY}

provider:
  name: aws
  runtime: nodejs8.10
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  websocketApiRouteSelectionExpression: $request.body.action
  websocketApiName: csbport-ws-${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["PortRequestDynamoTable", "Arn" ] }
        - { "Fn::GetAtt": ["WSClientsDynamoTable", "Arn" ] }
  environment:
    CLIENTS_TABLE_NAME: ${self:custom.clientsTableName}
    PORTREQUESTS_TABLE_NAME: ${self:custom.requestsTableName}
    PRIVATE_KEY: ${self:custom.privateKey}
    PUBLIC_KEY: ${self:custom.publicKey}

functions:
  app:
    handler: index.handler
    timeout: 10 # optional, in seconds, default is 6
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http: 
          path: /{proxy+}
          method: ANY
          cors: true
  ws-handler:
    handler: index.wsHandler
    events: 
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default
      - websocket: 
          route: join

resources:
  Resources:
    WSClientsDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: connectionId
            AttributeType: S
        KeySchema:
          -
            AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.clientsTableName}
    PortRequestDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: requestId
            AttributeType: S
        KeySchema:
          -
            AttributeName: requestId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.requestsTableName}